# AUTOGENERATED! DO NOT EDIT! File to edit: 00_Pipeline.ipynb (unless otherwise specified).

__all__ = ['get_data', 'TransformeeMaison', 'split_data', 'Pipy']

# Cell
import numpy as np
import pandas as pd
from datetime import datetime
from sklearn.preprocessing import OneHotEncoder
from sklearn.base import BaseEstimator,TransformerMixin
from sklearn.decomposition import PCA
from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.model_selection import GridSearchCV

# Cell
def get_data(path):
    data = pd.read_csv(path)
    return data

# Cell
class TransformeeMaison(BaseEstimator, TransformerMixin):

    def __init__(self,dateTo='annee'):
        #dateTo est un hyperparametre qui prend soit la valeur "annee" soit "age"
        self.ohe = OneHotEncoder()
        self.dateTo = dateTo
    def fit(self,X,y=None):
        X_ = X.copy()
        self.ohe.fit(X_.loc[:,['couleur']])
        self.surface_mean = X_.surface.mean()
        self.nb_chambre_mean = np.round(X_.nb_chambre.mean())
        return self
    def transform(self,X,y=None):
        X_ = X.copy()
        # remplacer les valeurs Nan
        X_.fillna({'surface':self.surface_mean,
                   'nb_chambre':self.nb_chambre_mean},
            inplace=True)
        # changer le type de la date en datetime
        X_.date_creation = pd.to_datetime(X_.date_creation)

        if self.dateTo == 'annee':
            X_["annee"] = X_.date_creation.apply(lambda d : d.year)
        elif self.dateTo =='age':
            X_["age"] = X_.date_creation.apply(lambda d : datetime.now().year - d.year)

        X_.drop("date_creation",axis=1,inplace=True)

        # remplacer la couleur par le code One Hot
        couleur_sparse=self.ohe.transform(X_.loc[:,['couleur']])
        couleur_encoded=couleur_sparse.toarray()
        df_couleur_encoded=pd.DataFrame(couleur_encoded,
                                        columns='couleur_'+self.ohe.categories_[0],
                                        index=X_.index)
        X_=pd.concat([X_,df_couleur_encoded], axis=1)
        X_.drop('couleur', axis=1, inplace=True, errors='ignore')

        return X_


# Cell
def split_data(X,y,test_size):
    X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=test_size)
    return X_train , X_test,y_train,y_test

# Cell
class Pipy :
    def __init__(self,Pipe,Params):
        self.Pipe = Pipe
        self.Params = Params
        self.gs = None
    def gridSearchy(self,X,y):
        self.gs = GridSearchCV(self.Pipe,self.Params,cv=3,n_jobs=-1)
        self.gs.fit(X,y)
        return self.gs
    def gridBestEstimator(self):
        return self.gs.best_estimator_

